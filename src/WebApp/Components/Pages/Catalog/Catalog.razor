@page "/"
@inject NavigationManager Nav
@inject CatalogService CatalogService
@attribute [StreamRendering]


<PageTitle>AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">Ready for a new adventure?</SectionContent>
<SectionContent SectionName="page-header-subtitle">Start the season with the latest in clothing and equipment.</SectionContent>

<div style="display:flex; justify-content:center; margin-bottom:1.5rem;">
    <div style="background:#f6fff7; border-radius:16px; box-shadow:0 2px 8px #0001; padding:0.8rem 2.2rem; font-size:1.15em; color:#388e3c; font-weight:500; letter-spacing:0.01em;">
        @greeting
    </div>
</div>

<div class="catalog">
    <CatalogSearch BrandId="@BrandId" ItemTypeId="@ItemTypeId" />

    @if (catalogResult is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div>
            <div class="catalog-items">
                @foreach (var item in catalogResult.Data)
                {
                    <CatalogListItem Item="@item" />
                }
            </div>

            <div class="page-links">
                @foreach (var pageIndex in GetVisiblePageIndexes(catalogResult))
                {
                    var query = new List<string>();
                    if (pageIndex != 1) query.Add($"page={pageIndex}");
                    if (BrandId != null) query.Add($"brand={BrandId}");
                    if (ItemTypeId != null) query.Add($"type={ItemTypeId}");
                    var relUrl = "/" + (query.Count > 0 ? "?" + string.Join("&", query) : "");
                    <a class="@(Page == pageIndex || (Page is null && pageIndex == 1) ? "active-page" : null)" href="@relUrl">@pageIndex</a>
                }
            </div>
        </div>
    }
</div>

@code {
    const int PageSize = 9;
    private static readonly string[] Greetings = new[]
    {
        "Willkommen im eShop!",
        "Schön, dass Sie da sind!",
        "Viel Spaß beim Stöbern!",
        "Entdecken Sie unsere Angebote!",
        "Heute schon ein Schnäppchen gemacht?"
    };
    private string greeting = Greetings[new System.Random().Next(Greetings.Length)];

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery(Name = "brand")]
    public int? BrandId { get; set; }

    [SupplyParameterFromQuery(Name = "type")]
    public int? ItemTypeId { get; set; }

    CatalogResult? catalogResult;

    static IEnumerable<int> GetVisiblePageIndexes(CatalogResult result)
        => Enumerable.Range(1, (int)Math.Ceiling(1.0 * result.Count / PageSize));

    protected override async Task OnInitializedAsync()
    {
        catalogResult = await CatalogService.GetCatalogItems(
            Page.GetValueOrDefault(1) - 1,
            PageSize,
            BrandId,
            ItemTypeId);
    }
}
